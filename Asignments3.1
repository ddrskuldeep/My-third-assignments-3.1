{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": " Q1. Which keyword is used to create a function? Create a function to return a list of odd numbers in the\nrange of 1 to 25.",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "\nANS:-When we create a function than we will use (def) function.",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "l = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]",
      "metadata": {
        "trusted": true
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "list(filter(lambda x: x%2 !=0,l))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 6,
      "outputs": [
        {
          "execution_count": 6,
          "output_type": "execute_result",
          "data": {
            "text/plain": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Q2. Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs\nto demonstrate their use.",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "ANS:- *args and **kwargs are used to pass a variable number of arguments to a function. The special syntax *args in function definitions is used to pass a variable number of non-keyworded arguments to a function. It is used to pass a non-keyworded, variable-length argument list. The syntax is to use the symbol ( * ).",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "def test(*args):\n    for arg in args:\n        print(arg)\n\ntest(1, 2, 3,4)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 8,
      "outputs": [
        {
          "name": "stdout",
          "text": "1\n2\n3\n4\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": "def mytest(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key} = {value}\")\n\nmytest(first='kuldeep', mid='for', last='pwskills')\n\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 9,
      "outputs": [
        {
          "name": "stdout",
          "text": "first = kuldeep\nmid = for\nlast = pwskills\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Q3. What is an iterator in python? Name the method used to initialise the iterator object and the method\nused for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14,\n16, 18, 20].",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Ans:-An iterator in Python is an object that is used to iterate over iterable objects like lists, tuples, dicts, and sets. The Python iterators object is initialized using the iter() method. It uses the next() method for iteration.",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "l = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nl = iter(l)\nfor i in range(5):\n    print(next(l))",
      "metadata": {
        "trusted": true
      },
      "execution_count": 11,
      "outputs": [
        {
          "name": "stdout",
          "text": "2\n4\n6\n8\n10\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Q4. What is a generator function in python? Why yield keyword is used? Give an example of a generator\nfunction.",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Ans:-A generator function in Python is a special type of function that can be used to generate a series of values. we will use  yield keyword instead of return to return values one at a time. When the generator function is called.\nExample are below.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "def s(n):\n    for i in range(n):\n        yield i ** 2\n\nfor num in s(10):\n    print(num)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 13,
      "outputs": [
        {
          "name": "stdout",
          "text": "0\n1\n4\n9\n16\n25\n36\n49\n64\n81\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Q5. Create a generator function for prime numbers less than 1000. Use the next() method to print the\nfirst 20 prime numbers.",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "\ndef genPrimes():\n    n = 2\n    primes = []\n    while True:\n        isPrime = True\n        for p in primes:\n            if n % p == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(n)\n            yield n\n        n += 1\n\nprime_gen = genPrimes()\nfor i in range(20):\n    print(next(prime_gen))",
      "metadata": {},
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "text": "2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Q6. Write a python program to print the first 10 Fibonacci numbers using a while loop.",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "l1 = 0\nl2 = 1\ncount = 0\n\nwhile count < 10:\n    print(l1)\n    test = l1 + l2\n    l1 = l2\n    l2 = test\n    count += 1",
      "metadata": {
        "trusted": true
      },
      "execution_count": 21,
      "outputs": [
        {
          "name": "stdout",
          "text": "0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Q7. Write a List Comprehension to iterate through the given string: ‘pwskills’.\nExpected output: ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "s = \"pwskills\"\nlist(map(lambda s: s.upper(),s))",
      "metadata": {},
      "execution_count": null,
      "outputs": [
        {
          "execution_count": 22,
          "output_type": "execute_result",
          "data": {
            "text/plain": "['P', 'W', 'S', 'K', 'I', 'L', 'L', 'S']"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "Q8. Write a python program to check whether a given number is Palindrome or not using a while loop.",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "n = int(input(\"Enter number: \"))\ntemp = n\nrev = 0\n\nwhile(n > 0):\n    dig = n % 10\n    rev = rev * 10 + dig\n    n = n // 10\n\nif(temp == rev):\n    print(\"The number is a palindrome!\")\nelse:\n    print(\"The number isn't a palindrome!\")\n",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Enter number:  2\nThe number is a palindrome!",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Q9. Write a code to print odd numbers from 1 to 100 using list comprehension.",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "\ntest= [x for x in range(1, 101) if x % 2 != 0]\nprint(test)",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}